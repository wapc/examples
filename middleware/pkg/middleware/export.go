// Code generated by @apexlang/codegen. DO NOT EDIT.

package middleware

import (
	"context"

	"github.com/wapc/tinygo-msgpack"
	"github.com/wapc/tinygo-msgpack/convert"
	"github.com/wapc/wapc-guest-tinygo"
)

var _ = convert.Package

func RegisterRedirect(svc Redirect) {
	wapc.RegisterFunction("http.middleware.v1.Redirect/initialize", redirectInitializeWrapper(svc))
	wapc.RegisterFunction("http.middleware.v1.Redirect/handle", redirectHandleWrapper(svc))
}

func redirectInitializeWrapper(svc Redirect) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var request Config
		if err := request.Decode(&decoder); err != nil {
			return nil, err
		}
		err := svc.Initialize(ctx, &request)
		if err != nil {
			return nil, err
		}
		return []byte{}, nil
	}
}

func redirectHandleWrapper(svc Redirect) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var request HttpRequest
		if err := request.Decode(&decoder); err != nil {
			return nil, err
		}
		response, err := svc.Handle(ctx, &request)
		if err != nil {
			return nil, err
		}
		return msgpack.ToBytes(response)
	}
}
